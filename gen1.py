import os
import ollama
import yfinance as yf
import requests
import psycopg2
import numpy as np
from scipy.spatial.distance import cosine
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GOOGLE_CSE_ID = os.getenv("GOOGLE_CSE_ID")

DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = os.getenv("DB_PORT", "5432")

conn = psycopg2.connect(
    dbname=DB_NAME,
    user=DB_USER,
    password=DB_PASSWORD,
    host=DB_HOST,
    port=DB_PORT
)
cursor = conn.cursor()


class StockBot:
    def __init__(self):
        self.telegram_token = TELEGRAM_TOKEN
        self.google_api_key = GOOGLE_API_KEY
        self.google_cse_id = GOOGLE_CSE_ID
        # Î™®Îç∏ Î≥ÄÍ≤Ω: gemma2:2b ÏÇ¨Ïö©
        self.phi_model = "gemma2:2b"

    def get_embedding(self, text):
        response = ollama.embeddings(model="nomic-embed-text", prompt=text)
        return response["embedding"]

    def find_best_match(self, user_input):
        user_embedding = self.get_embedding(user_input)
        cursor.execute("SELECT question, answer, embedding FROM stock_chatbot_data")
        rows = cursor.fetchall()

        best_match = None
        best_similarity = float("inf")
        best_answer = ""

        for question, answer, embedding in rows:
            embedding_vector = np.array(embedding)
            similarity = cosine(user_embedding, embedding_vector)
            if similarity < best_similarity:
                best_similarity = similarity
                best_match = question
                best_answer = answer

        return best_answer if best_match else None

    def get_stock_info(self, stock_ticker):
        stock = yf.Ticker(stock_ticker)
        info = stock.info
        pbr = info.get("priceToBook", "N/A")
        per = info.get("trailingPE", "N/A")
        roe = info.get("returnOnEquity", "N/A")
        market_cap = info.get("marketCap", "N/A")

        return (f"üìà {stock_ticker} Ï†ïÎ≥¥:\n"
                f"PBR: {pbr}\n"
                f"PER: {per}\n"
                f"ROE: {roe}\n"
                f"ÏãúÍ∞ÄÏ¥ùÏï°: {market_cap}")

    def search_news(self, stock_ticker):
        search_query = f"{stock_ticker} stock news"
        url = (f"https://www.googleapis.com/customsearch/v1?q={search_query}"
               f"&key={self.google_api_key}&cx={self.google_cse_id}")
        response = requests.get(url).json()
        results = response.get("items", [])
        news_list = []
        for item in results[:3]:
            title = item["title"]
            link = item["link"]
            news_list.append(f"{title}\n{link}")
        return "\n\n".join(news_list) if news_list else "Í¥ÄÎ†® Îâ¥Ïä§Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."

    def generate_phi_response(self, user_input):
        response = ollama.chat(
            model=self.phi_model,
            messages=[{"role": "user", "content": user_input}]
        )
        return response["message"]["content"]

    def resolve_ticker(self, company_name):
        prompt = f"Ï£ºÏãù ÌöåÏÇ¨ '{company_name}'Ïùò Ïò¨Î∞îÎ•∏ Ìã∞Ïª§ Ïã¨Î≥ºÏùÄ Î¨¥ÏóáÏûÖÎãàÍπå? Ìïú Îã®Ïñ¥Î°ú ÎåÄÎãµÌï¥ Ï£ºÏÑ∏Ïöî."
        ticker = self.generate_phi_response(prompt)
        return ticker.strip().upper()

    def get_related_stocks(self, stock_ticker):
        """
        Ìï¥Îãπ Ï£ºÏãùÏùò ÏÑπÌÑ∞ Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌïú ÌõÑ, ÎØ∏Î¶¨ Ï†ïÏùòÌïú ÏÑπÌÑ∞Î≥Ñ Îß§ÌïëÏùÑ ÌÜµÌï¥ Í¥ÄÎ†® Ï£ºÏãùÏùÑ Î∞òÌôòÌï©ÎãàÎã§.
        (Ïã§Ï†ú ÌôòÍ≤ΩÏóêÏÑúÎäî Î≥¥Îã§ Ï†ïÍµêÌïú Ïä§ÌÅ¨Î¶¨ÎÑàÎ•º ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏùå)
        """
        stock = yf.Ticker(stock_ticker)
        info = stock.info
        sector = info.get("sector")
        if not sector:
            return f"{stock_ticker}Ïùò ÏÑπÌÑ∞ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
        # ÏòàÏãú Îß§Ìïë (ÌïÑÏöîÏóê Îî∞Îùº Ï∂îÍ∞Ä ÌôïÏû•)
        sector_mapping = {
            "Technology": ["AAPL", "MSFT", "GOOGL", "FB", "IBM"],
            "Healthcare": ["JNJ", "PFE", "MRK", "ABBV", "TMO"],
            "Financial Services": ["JPM", "BAC", "WFC", "C", "GS"],
        }
        if sector in sector_mapping:
            related = sector_mapping[sector]
            return f"{stock_ticker}Ïùò ÏÑπÌÑ∞({sector})Ïóê Ìï¥ÎãπÌïòÎäî Í¥ÄÎ†® Ï£ºÏãù: {', '.join(related)}"
        else:
            return f"{stock_ticker}Ïùò ÏÑπÌÑ∞({sector})Ïóê Ìï¥ÎãπÌïòÎäî Í¥ÄÎ†® Ï£ºÏãùÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_input = update.message.text
        lower_input = user_input.lower()

        # "Í¥ÄÎ†® Ï£ºÏãù" ÏöîÏ≤≠: Î™®Îç∏ ÎãµÎ≥Ä ÎåÄÏã† ÏïºÌõÑ ÌååÏù¥ÎÇ∏Ïä§ Ï†ïÎ≥¥Î•º ÏÇ¨Ïö©
        if "Í¥ÄÎ†® Ï£ºÏãù" in lower_input:
            # ÌöåÏÇ¨ Ïù¥Î¶ÑÏù¥ÎÇò Ìã∞Ïª§Î•º "Í¥ÄÎ†® Ï£ºÏãù" ÏïûÏóê ÏûÖÎ†•ÌñàÎã§Í≥† Í∞ÄÏ†ï
            company_name = user_input.split("Í¥ÄÎ†® Ï£ºÏãù")[0].strip()
            if not company_name:
                company_name = user_input.strip()
            ticker = self.resolve_ticker(company_name)
            response = self.get_related_stocks(ticker)
        # "Ïù¥Ïäà ÏïåÎ†§Ï§ò" ÏöîÏ≤≠: Íµ¨Í∏Ä Ïª§Ïä§ÌÖÄ ÏÑúÏπò APIÎ•º ÏÇ¨Ïö©
        elif "Ïù¥Ïäà ÏïåÎ†§Ï§ò" in lower_input:
            ticker = user_input.split("Ïù¥Ïäà ÏïåÎ†§Ï§ò")[0].strip().upper()
            response = self.search_news(ticker)
        # "ÏûêÏÑ∏ÌïòÍ≤å ÏïåÎ†§Ï§ò" ÏöîÏ≤≠: ÏïºÌõÑ ÌååÏù¥ÎÇ∏Ïä§Î•º ÏÇ¨Ïö©Ìï¥ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï†úÍ≥µ
        elif "ÏûêÏÑ∏ÌïòÍ≤å ÏïåÎ†§Ï§ò" in lower_input:
            company_input = user_input.split("ÏûêÏÑ∏ÌïòÍ≤å ÏïåÎ†§Ï§ò")[0].strip()
            ticker = self.resolve_ticker(company_input)
            response = self.get_stock_info(ticker)
        # Í∑∏ Ïô∏Îäî gemma2:2b Î™®Îç∏Ïùò ÎãµÎ≥ÄÏùÑ ÏÇ¨Ïö©
        else:
            response = self.generate_phi_response(user_input)

        await update.message.reply_text(response)

    def run_telegram_bot(self):
        application = ApplicationBuilder().token(self.telegram_token).build()
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        application.run_polling()


if __name__ == "__main__":
    bot = StockBot()
    bot.run_telegram_bot()

